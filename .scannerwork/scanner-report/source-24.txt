import { DLRReferenceRegion } from "../interface/dlrreferenceregion";
import { EnumDLRLocalizationSourceType } from '../enum/enumdlrlocalizationsourcetype';

export function isImageSource(value: any):boolean {
    // if value is null, or is not a object, or is a array, return false
    if(!value || typeof value !== 'object' || Array.isArray(value)) return false;
        
    if(!('getImage' in value)) return false;
    return true;
}

export function isDSImage(value: any):boolean {
    // if value is null, or is not a object, or is a array, return false
    if(!value || typeof value !== 'object' || Array.isArray(value)) return false;
        
    if(!('data' in value)) return false;
    if(!('width' in value)) return false;
    if(!('height' in value)) return false;
    if(!('pixelFormat' in value)) return false;
    return true;
}

export function isDCEFrame(value: any):any {
    // if value is null, or is not a object, or is a array, return false
    if(!value || typeof value !== 'object' || Array.isArray(value)) return false;

    if(!('data' in value)) return false;
    if(!('region' in value)) return false;
    if(!('sx' in value)) return false;
    if(!('sy' in value)) return false;
    if(!('width' in value)) return false;
    if(!('height' in value)) return false;
    if(!('colorMode' in value)) return false;
    if(!('timeSpent' in value)) return false;
    if(!('timeStamp' in value)) return false;
    if(!('isCropped' in value)) return false;
    if(!('toCanvas' in value)) return false;
    if(!('_sWidth' in value)) return false;
    if(!('_sHeight' in value)) return false;
    if(!('_bUseWebGL' in value)) return false;
    return true;
}

export function isRegionNormalPreset(region:DLRReferenceRegion): boolean {
    return EnumDLRLocalizationSourceType.LST_MANUAL_SPECIFICATION == region.localizationSourceType && 1 == region.regionMeasuredByPercentage && JSON.stringify([{x: 0,y: 100},{x: 100,y: 0},{x: 100,y: 100},{x: 0,y: 100}]) === JSON.stringify(region.location.points);
}

export function isPresetRegion(region:any):boolean {
    if(!region) return false;
    if(region.regionLeft === 0 && region.regionRight === 100 && region.regionTop === 40 && region.regionBottom === 60 && region.regionMeasuredByPercentage === true) return true;
    return false;
}